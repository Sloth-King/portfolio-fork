{
  "project1": {
    "title": "COTS : Take Your Destiny Into Your Own Wings",
    "subtitle": "PC and Mobile Roguelike tower defense game",
    "video": "https://www.youtube.com/watch?v=kdhfA9q8cNI",
    "description": "A roguelike tower defense game made with Unity. This game was designed to be both mobile and PC compatible. This project is being made in a team of 7, with 4 artists and 3 developers, it is undoubtedly my largest project. Being a small team, I’ve had to work on various different tasks such as gameplay development, bug fixing, refactoring, code cleaning, UI/UX, game design, marketing and communications. COTS is not yet released, with an expected release January 2026, so no git or playable version is available today. ",
    "tools": "Unity ; C# ; Kickstarter ; Instagram/Twitter",
    "link-titles":[
      "Steam",
      "Kickstarter",
      "Instagram"
    ],
    "links": [
      "https://store.steampowered.com/app/3687890/COTS/",
      "https://www.kickstarter.com/projects/plampstudio/cots-take-your-destiny-into-your-own-wings?ref=43f7de",
      "https://www.instagram.com/cots_game/"
    ],
    "images": [
        "assets/project-details/cots/bigbattle.webp",
        "assets/project-details/cots/cards.webp",
        "assets/project-details/cots/choices.webp",
        "assets/project-details/cots/strategy.webp"
    ]
  },

  "project2": {
    "title": "Fast, orientable, aperiodic ocean",
    "subtitle": "synthesis using tiling and blending in Godot",
    "video": "https://youtu.be/D4zUmNnRCB4",
    "description": "A study and research project for the first year of my masters degree in a group of four. This project was an implementation of the work by N. Lutz et Al. [2019] describing the generation of oceans with shaders using tiling and blending.(view “Implemented Paper” button for the source). Our work consisted of understanding and implementing this work into Godot, more specifically with GdShader and GLSL. Our work includes ocean generation using tinear tiling and Blending, orientable oceans with flow maps, LEAN mapping (specular light dampening, not perfectly implemented), and many different debug tools made in Godot to help complete the project.",
    "tools": "Godot ; GDshader",
    "link-titles":[
      "Github",
      "Article"
    ],
    "links": [
      "https://github.com/RTheoGH/TER-Ocean",
      "https://dl.acm.org/doi/10.1145/3675388"
    ],
    "images": [
      "assets/project-details/ocean/tb.png",
      "assets/project-details/ocean/image2_leanfinal.png",
      "assets/project-details/ocean/flow3.png",
      "assets/project-details/ocean/flow4.png"
    ]
  },

    "project3": {
    "title": "Fisheye Engine",
    "subtitle": "Game engine \"from scratch\" in C++",
    "video": "https://youtu.be/neiFw3aLmls",
    "description": "Three-month university project done in pairs with the objective of creating a game engine based on openGL. Our project implements, among other things, deferred rendering, an almost complete physics engine and a user interaction system. Particular attention has been paid to the game developer experience, with an intuitive and secure code architecture using the expressive power of modern C++.",
    "tools": "C++ ; OpenGl ; GLSL",
    "link-titles":[
      "Github"
    ],
    "links": [
      "https://github.com/Sloth-King/Fisheye-Engine"
    ],
    "images": [
      "assets/project-details/fisheye/game.webp"
    ]
  },

    "project4": {
    "title": "MAIge Academy",
    "subtitle": "Advanced multi-agent system with strategies in Godot",
    "video": "https://youtu.be/74uu5qPg5co",
    "description": "A month long four person university project made for a multi agent systems course using Godot. This project implements relatively advanced agents (student and teacher) with each boasting several strategies and responses. The teacher has multiple spells that are used in different conditions (ie number of students, range, etc..) and the students have multiple different strategies to escape the teacher that can be chosen in the game’s menu (ie go as far from the teacher as possible, go for the closest candy always, go alone, go in pairs…). There are no player controls, and it is available to play on Itch.",
    "tools": "Godot",
    "link-titles":[
      "Itch",
      "Github"],
    "links": [
      "https://ohhnyx.itch.io/maige-academy",
      "https://github.com/binaryHips/MAIgeAcademy"
    ],
    "images": [
      "assets/project-details/maige/snow.png",
      "assets/project-details/maige/recess3.png",
      "assets/project-details/maige/recessscore.png",
      "assets/project-details/maige/LevelSelect.png",
      "assets/project-details/maige/outside2.png"
    ]
  },

    "project5": {
    "title": "AIgricultor",
    "subtitle": "Simple multi agent system in Godot",
    "video": "https://youtu.be/c0CstpRKJa4",
    "description": "A month long university project made for a multi agent systems course. This project implements two simple agents (dog and sheep) that react to changes in the environment, in our case, the dog will react to any sheep escaping the enclosure and push them back in, and the sheep will try to escape when the dog isn’t around. This project was made in a group of 4 using the Godot engine. There are no player controls, and it is available to play on Itch.",
    "tools": "Godot",
    "link-titles":[
      "Itch",
      "Github"
    ],
    "links": [
      "https://ohhnyx.itch.io/aigricultor",
      "https://github.com/VigKillian/AIgricultor"
    ],
    "images": [
      "assets/project-details/aigricultor/fewsheepnight.png",
      "assets/project-details/aigricultor/manysheep.png",
      "assets/project-details/aigricultor/MainMenu.jpg",
      "assets/project-details/aigricultor/end.png"
    ]
  },

    "project6": {
    "title": "HarMONEY",
    "subtitle": "Automatic or manual color harmonisation software",
    "video": "https://youtu.be/qKjq0s50vBc",
    "description": "A research project for an image processing course that consisted of making a state of the art on the subject of color harmonization, and implementing different algorithms described in scientific papers. Color harmonization means to choose an image, a harmonic template (on the color wheel), and then  to move all the colors to reach the closest color in that harmony. It was a 3-person project, done in Python and mainly using the OpenCV library for image treatment. \n (The video is a comedic presentation of the project and it is in french.)",
    "tools": "Python, OpenCV, R&D",
    "link-titles":[
      "Github",
      "Article 1",
      "Article 2" 
    ],
    "links": [
      "https://github.com/Victor-ONIC/hai804-809",
      "https://dl.acm.org/doi/10.1145/1141911.1141933",
      "https://www.researchgate.net/publication/324218409_Palette-based_image_decomposition_harmonization_and_color_transfer"
    ],
    "images": [
      "assets/project-details/harmoney/combined.png",
      "assets/project-details/harmoney/combined(1).png",
      "assets/project-details/harmoney/combined(2).png",
      "assets/project-details/harmoney/combined(3).png",
      "assets/project-details/harmoney/combined(4).png"
    ]
  },

    "project7": {
    "title": "Raytracer",
    "subtitle": "Basic Raytracer made in C++",
    "video": "assets/project-details/raytrace/ptitfoot.png",
    "description": " A basic OpenGL C++ Raytracer made for a 3D programming course. My project includes compatibility with simple shapes like cubes and spheres, and can compute triangle intersections, which, using a KD-Tree structure to accelerate, allowing compatibility with more advanced meshes. This project also includes a simple Phong Shader, simulates reflection (ie mirrors), refraction (ie glass), soft shadows (or hard shadows for faster computation), and a basic motion blur effect for spheres.",
    "tools": "C++ ; OpenGl ; GLSL",
    "link-titles":[
      "Github"
    ],
    "links": [
      "https://github.com/Sloth-King/RayTraceProject/tree/main"
    ],
    "images": [
      "assets/project-details/raytrace/glass1.png",
      "assets/project-details/raytrace/meteorshower2.png",
      "assets/project-details/raytrace/softShadows128.png",
      "assets/project-details/raytrace/srefract.png",
      "assets/project-details/raytrace/MIRRORS.png",
      "assets/project-details/raytrace/glass2.png",
      "assets/project-details/raytrace/ptitfoot.png"
    ]
  },

    "project8": {
    "title": "Nokia Jam 6 : The Adventures of Trognon",
    "subtitle": "2D Platformer",
    "video": "https://youtu.be/rghc6frLzWc",
    "description": "This was my first ever game jam, as well as my first real experience with Godot and game engines in general. The work was done in pairs and lasted only a day and a half, it is a simple platformer with the constraint of being able to run on an old Nokia phone (limited colors, resolution, sounds, etc…). The player must collect keys to open doors, and loses if they move when the timer hits FREEZE!, or when in contact with spikes or cannon balls. The game is available to play on Itch.",
    "tools": "Godot",
    "link-titles":[
      "Itch",
      "Codeberg (git)"
    ],
    "links": [
      "https://shugarskull.itch.io/the-adventures-of-trognon",
      "https://codeberg.org/ShugarSkull/NokiaJam6"
    ],
    "images": [
      "assets/project-details/trognon/FreezeGif.gif",
      "assets/project-details/trognon/spike.jpg",
      "assets/project-details/trognon/TrognonCanon.jpg",
      "assets/project-details/trognon/TrognonThumbnail.jpg",
      "assets/project-details/trognon/Level4.jpg",
      "assets/project-details/trognon/stop.jpg"
    ]
  },

    "project9": {
    "title": "Imagine Jam 2025 : CrashLands",
    "subtitle": "Short 2D RPG",
    "video": "https://youtu.be/c1RdtOEWiqY",
    "description": " A 1.5 day game jam project done in Unity. This project is a simple RPG where the objective is to reconstruct a ship to leave the planet we crashed on. The project includes basic combat with dice rolls, walking around and picking up objects.",
    "tools": " Unity",
    "link-titles":[
      "Itch",
      "Github"
    ],
    "links": [
      "https://thedrewman.itch.io/crashlands",
      "https://github.com/Sloth-King/ImagineJam24"
    ],
    "images": [
      "assets/project-details/crashlands/thumbnail.jpg",
      "assets/project-details/crashlands/chillin.jpg",
      "assets/project-details/crashlands/fight.jpg"
    ]
  }

}
